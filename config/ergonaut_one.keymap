#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define MOVER 1
#define NUMER 2
#define QUICK 3
#define REPEAT 4
#define SYS 5
#define PARENS 6
#define CHAINS 7
#define CHAINS_G 8
#define CHAINS_GI 9
#define CHAINS_S 10
#define CHAINS_SD 11

&lt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW RIGHT_ARROW UP_ARROW DOWN_ARROW PAGE_UP PAGE_DOWN>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        XdgConfigkp: XdgConfigKepPress {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&XdgConfig &kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <350>;
        };

        kpkp: KeyPressKepPress {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&TapNoRepeat &kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        mmkpDQTkpGRAVE: ModMorphkpDQTkpGRAVE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmkpEQUALkpEQUAL: ModMorphkpEQUALkpEQUAL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmkpMINUSkpPLUS: ModMorphkpMINUSkpPLUS {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp PLUS>;
            keep-mods = <(MOD_LCTL|MOD_RCTL)>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL)>;
        };

        mmmkpMINUSkpPLUS: ModmmkpMINUSkpPLUS {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp &mmkpMINUSkpPLUS>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        mmtoMOVERkpUNDER: ModMorphtoMOVERkpUNDER {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&to MOVER &kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mommtoMOVERkpUNDER: MomentNUMERmmtoMOVERkpUNDER {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo &mmtoMOVERkpUNDER>;
            flavor = "balanced";
            tapping-term-ms = <300>;
        };

        moto: MomentaryTo {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo &to>;
            flavor = "balanced";
            tapping-term-ms = <300>;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        sll: sll {
            compatible = "zmk,behavior-sticky-key";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <2000>;
            quick-release;
        };
    };

    macros {

        CodeBlock: CodeBlock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp GRAVE &kp LEFT &kp GRAVE &kp LEFT>;
        };

        GoIfError: GoIfError {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp O &kp SPACE &kp I &kp F &kp E &kp LEFT &kp N &kp LEFT &kp I &kp LEFT &kp F &kp LEFT>;
        };

        TapNoRepeat: TapNoRepeat {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_pause_for_release>;
        };

        Wmoto: Wrapmoto {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_press &macro_param_1to1 &macro_param_2to2 &moto MACRO_PLACEHOLDER MACRO_PLACEHOLDER &macro_pause_for_release &macro_release &macro_param_1to1 &macro_param_2to2 &moto MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        XdgConfig: XdgConfig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DOLLAR &kp LS(H) &kp LS(O) &kp LS(M) &kp LS(E) &kp SLASH &kp DOT &kp C &kp O &kp N &kp F &kp I &kp G &kp DQT &kp SLASH>;
        };

        bquotes: OpenClose_bquotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT>;
        };

        brackets: OpenClose_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };

        bspcdel: BackspaceDelete {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp BSPC &kp DEL>;
        };

        curlies: OpenClose_curlies {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };

        dquotes: OpenClose_dquotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
        };

        kpBASE: kpBASE {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to BASE>;
        };

        parens: OpenClose_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };

        squotes: OpenClose_squotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
        };

        to0l11: ToBASEL11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp TAB &macro_pause_for_release &macro_release &kp TAB>;
        };

        to0l12: ToBASEL12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp Q &macro_pause_for_release &macro_release &kp Q>;
        };

        to0l13: ToBASEL13 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp W &macro_pause_for_release &macro_release &kp W>;
        };

        to0l14: ToBASEL14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp E &macro_pause_for_release &macro_release &kp E>;
        };

        to0l15: ToBASEL15 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp R &macro_pause_for_release &macro_release &kp R>;
        };

        to0l16: ToBASEL16 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(T) T &macro_pause_for_release &macro_release &kpkp RG(T) T>;
        };

        to0l21: ToBASEL21 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LSHIFT BACKSPACE &macro_pause_for_release &macro_release &mt LSHIFT BACKSPACE>;
        };

        to0l22: ToBASEL22 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp A &macro_pause_for_release &macro_release &kp A>;
        };

        to0l23: ToBASEL23 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LSHIFT S &macro_pause_for_release &macro_release &mt LSHIFT S>;
        };

        to0l24: ToBASEL24 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LGUI D &macro_pause_for_release &macro_release &mt LGUI D>;
        };

        to0l25: ToBASEL25 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LALT F &macro_pause_for_release &macro_release &mt LALT F>;
        };

        to0l26: ToBASEL26 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp G &macro_pause_for_release &macro_release &kp G>;
        };

        to0l31: ToBASEL31 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mmmkpMINUSkpPLUS LCTRL 0 &macro_pause_for_release &macro_release &mmmkpMINUSkpPLUS LCTRL 0>;
        };

        to0l32: ToBASEL32 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp Z &macro_pause_for_release &macro_release &kp Z>;
        };

        to0l33: ToBASEL33 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp X &macro_pause_for_release &macro_release &kp X>;
        };

        to0l34: ToBASEL34 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &XdgConfigkp C 0 &macro_pause_for_release &macro_release &XdgConfigkp C 0>;
        };

        to0l35: ToBASEL35 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp V &macro_pause_for_release &macro_release &kp V>;
        };

        to0l36: ToBASEL36 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp B &macro_pause_for_release &macro_release &kp B>;
        };

        to0l41: ToBASEL41 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &moto QUICK CHAINS &macro_pause_for_release &macro_release &moto QUICK CHAINS>;
        };

        to0l42: ToBASEL42 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mommtoMOVERkpUNDER NUMER 0 &macro_pause_for_release &macro_release &mommtoMOVERkpUNDER NUMER 0>;
        };

        to0l43: ToBASEL43 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LCTRL ESCAPE &macro_pause_for_release &macro_release &mt LCTRL ESCAPE>;
        };

        to0r11: ToBASER11 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp Y &macro_pause_for_release &macro_release &kp Y>;
        };

        to0r12: ToBASER12 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp U &macro_pause_for_release &macro_release &kp U>;
        };

        to0r13: ToBASER13 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp I &macro_pause_for_release &macro_release &kp I>;
        };

        to0r14: ToBASER14 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp O &macro_pause_for_release &macro_release &kp O>;
        };

        to0r15: ToBASER15 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp P &macro_pause_for_release &macro_release &kp P>;
        };

        to0r16: ToBASER16 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp LBKT &macro_pause_for_release &macro_release &kp LBKT>;
        };

        to0r21: ToBASER21 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp H &macro_pause_for_release &macro_release &kp H>;
        };

        to0r22: ToBASER22 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &rmt LALT J &macro_pause_for_release &macro_release &rmt LALT J>;
        };

        to0r23: ToBASER23 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &rmt LGUI K &macro_pause_for_release &macro_release &rmt LGUI K>;
        };

        to0r24: ToBASER24 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &rmt LSHIFT L &macro_pause_for_release &macro_release &rmt LSHIFT L>;
        };

        to0r25: ToBASER25 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(SEMI) SEMI &macro_pause_for_release &macro_release &kpkp RG(SEMI) SEMI>;
        };

        to0r26: ToBASER26 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(SQT) SQT &macro_pause_for_release &macro_release &kpkp RG(SQT) SQT>;
        };

        to0r31: ToBASER31 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp N &macro_pause_for_release &macro_release &kp N>;
        };

        to0r32: ToBASER32 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(M) M &macro_pause_for_release &macro_release &kpkp RG(M) M>;
        };

        to0r33: ToBASER33 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(COMMA) COMMA &macro_pause_for_release &macro_release &kpkp RG(COMMA) COMMA>;
        };

        to0r34: ToBASER34 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kpkp RG(DOT) DOT &macro_pause_for_release &macro_release &kpkp RG(DOT) DOT>;
        };

        to0r35: ToBASER35 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp SLASH &macro_pause_for_release &macro_release &kp SLASH>;
        };

        to0r36: ToBASER36 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &kp BACKSLASH &macro_pause_for_release &macro_release &kp BACKSLASH>;
        };

        to0r41: ToBASER41 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &mt LCTRL RETURN &macro_pause_for_release &macro_release &mt LCTRL RETURN>;
        };

        to0r42: ToBASER42 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &lt NUMER SPACE &macro_pause_for_release &macro_release &lt NUMER SPACE>;
        };

        to0r43: ToBASER43 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to BASE &macro_press &Wmoto QUICK CHAINS &macro_pause_for_release &macro_release &Wmoto QUICK CHAINS>;
        };
    };

    combos {
        compatible = "zmk,combos";

        System {
            bindings = <&sll SYS>;
            key-positions = <4 5>;
            require-prior-idle-ms = <500>;
        };

        LeftEnter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
        };

        LeftSpace {
            bindings = <&kp SPACE>;
            key-positions = <36 37>;
        };

        RightCaps {
            bindings = <&caps_word>;
            key-positions = <20 21>;
        };

        MiddleMouse {
            bindings = <&mkp MCLK>;
            key-positions = <27 28>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };

        Curlies {
            bindings = <&curlies>;
            key-positions = <16 19>;
            timeout-ms = <80>;
        };

        Parens {
            bindings = <&parens>;
            key-positions = <15 20>;
            timeout-ms = <80>;
        };

        Brackets {
            bindings = <&brackets>;
            key-positions = <14 21>;
            timeout-ms = <80>;
        };

        DoubleQuotes {
            bindings = <&dquotes>;
            key-positions = <4 7>;
            timeout-ms = <80>;
        };

        SingleQuotes {
            bindings = <&squotes>;
            key-positions = <3 8>;
            timeout-ms = <80>;
        };

        BackQuotes {
            bindings = <&bquotes>;
            key-positions = <2 9>;
            timeout-ms = <80>;
        };

        CodeQuotes {
            bindings = <&CodeBlock>;
            key-positions = <5 6>;
            timeout-ms = <80>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB                    &kp Q  &kp W         &kp E               &kp R                        &kpkp RG(T) T     &kp Y             &kp U            &kp I                  &kp O              &kp P                &kp LBKT
&mt LSHIFT BACKSPACE       &kp A  &mt LSHIFT S  &mt LGUI D          &mt LALT F                   &kp G             &kp H             &rmt LALT J      &rmt LGUI K            &rmt LSHIFT L      &kpkp RG(SEMI) SEMI  &kpkp RG(SQT) SQT
&mmmkpMINUSkpPLUS LCTRL 0  &kp Z  &kp X         &XdgConfigkp C 0    &kp V                        &kp B             &kp N             &kpkp RG(M) M    &kpkp RG(COMMA) COMMA  &kpkp RG(DOT) DOT  &kp SLASH            &kp BACKSLASH
                                                &moto QUICK CHAINS  &mommtoMOVERkpUNDER NUMER 0  &mt LCTRL ESCAPE  &mt LCTRL RETURN  &lt NUMER SPACE  &Wmoto QUICK CHAINS
            >;
        };

        MOVER {
            bindings = <
&to0l11  &to0l12  &to0l13  &to0l14  &to0l15  &to0l16   &to0r11   &to0r12         &to0r13       &to0r14            &to0r15  &to0r16
&to0l21  &to0l22  &to0l23  &to0l24  &to0l25  &to0l26   &kp LEFT  &rmt LALT DOWN  &rmt LGUI UP  &rmt LSHIFT RIGHT  &to0r25  &to0r26
&to0l31  &to0l32  &to0l33  &to0l34  &to0l35  &to0l36   &to0r31   &to0r32         &to0r33       &to0r34            &to0r35  &to0r36
                           &to0l41  &to0l42  &to BASE  &to0r41   &to0r42         &to0r43
            >;
        };

        NUMER {
            bindings = <
&kp LS(TAB)     &trans  &trans  &trans  &trans          &kp TILDE  &kp N0             &kp N1       &kp N2              &kp N3            &trans         &kp RBKT
&kp DELETE      &trans  &trans  &trans  &trans          &trans     &mmkpEQUALkpEQUAL  &mt LALT N4  &mt LGUI N5         &mt LSHIFT N6     &kp COLON      &mmkpDQTkpGRAVE
&mt LCTRL PLUS  &trans  &trans  &trans  &kp LS(INSERT)  &trans     &kp PLUS           &kp N7       &kpkp RG(COMMA) N8  &kpkp RG(DOT) N9  &kp LS(SLASH)  &kp PIPE
                                &trans  &kp UNDERSCORE  &trans     &trans             &trans       &trans
            >;
        };

        QUICK {
            bindings = <
&trans  &trans  &trans  &trans  &kp LG(C_VOL_UP)  &kp C_VOL_UP  &trans          &trans           &trans           &trans           &kp PSCRN  &kp LC(RBKT)
&trans  &trans  &trans  &trans  &kp LG(C_VOL_DN)  &kp C_VOL_DN  &kp HOME        &rmt LALT PG_DN  &rmt LGUI PG_UP  &rmt LSHIFT END  &trans     &trans
&trans  &trans  &trans  &trans  &trans            &trans        &trans          &trans           &trans           &trans           &trans     &trans
                        &trans  &trans            &trans        &rmt LCTRL F10  &kp F11          &kp F12
            >;
        };

        REPEAT {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SYS {
            bindings = <
&bootloader   &none         &none           &none         &sys_reset    &none         &none           &out OUT_USB  &none  &none  &none  &none
&bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2    &bt BT_SEL 1  &bt BT_SEL 0  &none         &none           &none         &none  &none  &none  &none
&none         &none         &bt BT_CLR_ALL  &bt BT_CLR    &out OUT_USB  &out OUT_BLE  &bt BT_CLR_ALL  &none         &none  &none  &none  &none
                                            &none         &none         &none         &none           &none         &none
            >;
        };

        PARENS {
            bindings = <
&to0l11   &to0l12  &to0l13  &to0l14  &to0l15  &to0l16   &to0r11  &to0r12  &to0r13  &to0r14        &to0r15  &to0r16
&bspcdel  &to0l22  &to0l23  &to0l24  &to0l25  &to0l26   &to0r21  &to0r22  &to0r23  &kpBASE RIGHT  &to0r25  &to0r26
&to0l31   &to0l32  &to0l33  &to0l34  &to0l35  &to0l36   &to0r31  &to0r32  &to0r33  &to0r34        &to0r35  &to0r36
                            &to0l41  &to0l42  &to BASE  &to0r41  &to0r42  &to0r43
            >;
        };

        CHAINS {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE      &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to CHAINS_G  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE      &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE  &to BASE  &to BASE      &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_G {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to CHAINS_GI  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE
                              &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_GI {
            bindings = <
&to BASE  &to BASE  &to BASE      &GoIfError  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to CHAINS_S  &to BASE    &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE      &to BASE    &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                                  &to BASE    &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_S {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to CHAINS_SD  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_SD {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &kp X     &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };
    };
};
