#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW RIGHT_ARROW UP_ARROW DOWN_ARROW PAGE_UP PAGE_DOWN>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 30 31 39 40 41>;
            quick-tap-ms = <200>;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Layer Tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 18 19 30 31 39 40 41>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        lhtkpkp: lhtkpkp {
            compatible = "zmk,behavior-hold-tap";
            label = "Left HoldTap 2KeyPress";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 30 31 36 37 38>;
            quick-tap-ms = <200>;
            hold-trigger-on-release;
        };

        htkpkpnr: htkpkpnr {
            compatible = "zmk,behavior-hold-tap";
            label = "2key press no repeat";
            bindings = <&kpnr>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        sls: sls {
            compatible = "zmk,behavior-sticky-key";
            label = "Short Sticky Layer";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
        };

        sll: sll {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Long";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
        };

        skl: skl {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Key Long";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            ignore-modifiers;
            quick-release;
        };

        hthomekp: hthomekp {
            compatible = "zmk,behavior-hold-tap";
            label = "HTHOMEKP";
            bindings = <&homeconfig>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        slxs: slxs {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Extra Short";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        multiquote: multiquote {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTIQUOTE";
            #binding-cells = <0>;
            bindings = <&quoted>, <&quoteds>, <&quotedb>, <&quotedbbb>;

            tapping-term-ms = <300>;
        };

        pipe: pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "PIPE";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            tapping-term-ms = <300>;
        };

        redir: redir {
            compatible = "zmk,behavior-tap-dance";
            label = "REDIR";
            #binding-cells = <0>;
            bindings = <&redir1>, <&redir2>, <&redir3>, <&redir21>;
        };

        multiparen: multiparen {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTIPAREN";
            #binding-cells = <0>;
            bindings = <&parened>, <&bracketed>, <&braced>;

            tapping-term-ms = <300>;
        };

        equals: equals {
            compatible = "zmk,behavior-tap-dance";
            label = "EQUALS";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&eqeq>, <&goeq>, <&neq>;

            tapping-term-ms = <300>;
        };

        htmosl: htmosl {
            compatible = "zmk,behavior-hold-tap";
            label = "HTMOSL";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sl>;
        };

        langor: langor {
            compatible = "zmk,behavior-tap-dance";
            label = "LANGOR";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>, <&none>;
        };

        mod5C: mod5C {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD5C";
            #binding-cells = <0>;
            bindings = <&kp LG(N5)>, <&kp LG(C)>;
        };

        shiftcaps: shiftcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTCAPS";
            #binding-cells = <0>;
            bindings = <&skl LSHFT>, <&caps_word>;
        };
    };

    macros {
        lazygit: bg_lazygit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Z) &kp L &kp A &kp Z &kp Y &kp G &kp I &kp T &kp SEMI &kp SPACE &kp F &kp G &kp RET>;
            label = "LAZYGIT";
        };

        sksls: slmod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &skl MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "SLMOD";
        };

        spaceand: spaceand {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp SPACE &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "SPACEAND";
        };

        noslcaps: nosl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CANCEL &caps_word>;
            label = "NOSL";
        };

        kpnr: kpnr {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>;

            label = "KeyPress No Repeat";
        };

        kpsls: kpsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "KeyPress Sticky Layer Short";
        };

        kpsl: kpsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
            label = "KeyPress StickyLayer";
        };

        kpsll: kpsll {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sll MACRO_PLACEHOLDER>;
            label = "KPSLL";
        };

        homeconfig: homeconfig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DLLR &kp LS(H) &kp LS(O) &kp LS(M) &kp LS(E) &kp DQT &kp FSLH &kp DOT &kp C &kp O &kp N &kp F &kp I &kp G &kp FSLH>;
            label = "HOMECONFIG";
        };

        kprsl: kprsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sl MACRO_PLACEHOLDER>;

            label = "KeyPress Repeat StickyLayer";
        };

        kprsls: kprsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sls MACRO_PLACEHOLDER>;

            label = "KPRSLS";
        };

        kpslxs: kpslxs {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &slxs MACRO_PLACEHOLDER>;
            label = "KPSLXS";
        };

        unicode: unicode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U))>;
            label = "UNICODE";
        };

        redir1: devnull1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL1";
        };

        redir2: devnull2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL2";
        };

        redir3: devnull3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE &kp N2 &kp GT &kp AMPS &kp N1 &kp SPACE>;
            label = "DEVNULL3";
        };

        quoted: quoted {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "QUOTED";
        };

        varred: varred {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "VARRED";
        };

        parened: parened {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENED";
        };

        braced: braced {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "BRACED";
        };

        bracketed: bracketed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETED";
        };

        goeq: goequals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUALS";
        };

        quoteds: quoteds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT_ARROW>;
            label = "QUOTEDS";
        };

        quotedb: quotedb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT_ARROW>;
            label = "QUOTEDB";
        };

        quotedbbb: quotedbbb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "QUOTEDBBB";
        };

        redir21: redirect21 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp GT &kp AMPS &kp N1 &kp SPACE>;
            label = "REDIRECT21";
        };

        eqeq: eqeq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "EQEQ";
        };

        neq: neq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL>;
            label = "NEQ";
        };
    };

    combos {
        compatible = "zmk,combos";

        csd {
            bindings = <&skl LA(LEFT_GUI)>;
            key-positions = <15 14>;
            layers = <0>;
        };

        cdf {
            bindings = <&skl LC(LEFT_GUI)>;
            key-positions = <15 16>;
            layers = <0>;
        };

        cad {
            bindings = <&skl LS(LEFT_GUI)>;
            key-positions = <15 13>;
            layers = <0>;
        };

        caf {
            bindings = <&skl LS(LEFT_CONTROL)>;
            key-positions = <13 16>;
            layers = <0>;
        };

        cas {
            bindings = <&skl LS(LEFT_ALT)>;
            key-positions = <14 13>;
            layers = <0>;
        };

        csf {
            bindings = <&skl LA(LEFT_CONTROL)>;
            key-positions = <16 14>;
            layers = <0>;
        };

        csdf {
            bindings = <&skl LA(LG(LEFT_CONTROL))>;
            key-positions = <16 14 15>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        casd {
            bindings = <&skl LA(LS(LEFT_GUI))>;
            key-positions = <14 15 13>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        casf {
            bindings = <&skl LA(LS(LEFT_CONTROL))>;
            key-positions = <14 13 16>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        sys {
            bindings = <&sll 5>;
            key-positions = <4 5>;
            layers = <0>;
            require-prior-idle-ms = <500>;
        };

        lenter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
            layers = <0>;
        };

        rspace {
            bindings = <&kp SPACE>;
            key-positions = <39 40>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB                         &kp Q             &kp W  &kp E            &kp R         &kp T             &kp Y                     &htkpkpnr EXCLAMATION U  &htkpkpnr AT_SIGN I       &htkpkpnr HASH O   &kp P                      &kp LBKT
&lhtkpkp LEFT_SHIFT BACKSPACE   &lhtkpkp LSHFT A  &kp S  &lmt LEFT_GUI D  &kp F         &kp G             &kp H                     &htkpkpnr DOLLAR J       &htkpkpnr PERCENT K       &htkpkpnr CARET L  &htkpkpnr COLON SEMICOLON  &kp SINGLE_QUOTE
&lhtkpkp LEFT_CONTROL K_CANCEL  &kp Z             &kp X  &hthomekp 0 C    &kp V         &kp B             &kp N                     &htkpkpnr AMPERSAND M    &htkpkpnr ASTERISK COMMA  &kp DOT            &kp SLASH                  &kp BACKSLASH
                                                         &htmosl 3 2      &llt 1 SPACE  &mt LCTRL ESCAPE  &mt RIGHT_CONTROL RETURN  &htmosl 1 4              &shiftcaps
            >;
        };

        NUM {
            bindings = <
&none  &none  &none  &none  &none  &none  &kp N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none
&none  &none  &none  &none  &none  &none  &none   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none  &none
&none  &none  &none  &none  &none  &none  &none   &kp N7        &kp N8        &kp N9        &none  &none
                     &none  &none  &none  &none   &kp DOT       &none
            >;
        };

        PROG {
            bindings = <
&kp LEFT_BRACKET      &none      &none  &none            &none   &kp SINGLE_QUOTE   &kpslxs N0 2    &kpslxs EXCLAMATION 2  &kpslxs AT_SIGN 2  &kpslxs HASH 2      &none  &kp RIGHT_BRACKET
&kp LEFT_PARENTHESIS  &kp TILDE  &none  &none            &none   &kp DOUBLE_QUOTES  &kpslxs PLUS 2  &kpslxs DOLLAR 2       &kpslxs PERCENT 2  &kpslxs CARET 2     &none  &kpsls RIGHT_PARENTHESIS 2
&kp LEFT_BRACE        &none      &none  &none            &none   &kp GRAVE          &equals         &kpslxs AMPERSAND 2    &kpslxs STAR 2     &kpslxs K_CANCEL 2  &none  &kp RIGHT_BRACE
                                        &kpslxs MINUS 2  &trans  &trans             &trans          &kpslxs DOT 2          &none
            >;
        };

        MOVE {
            bindings = <
&none  &none  &none  &none  &none  &none  &none     &kp PAGE_DOWN            &kp PAGE_UP        &kp INSERT           &none  &none
&none  &none  &none  &none  &none  &none  &kp LEFT  &rmt RIGHT_CONTROL DOWN  &rmt LEFT_META UP  &rmt LEFT_ALT RIGHT  &none  &none
&none  &none  &none  &none  &none  &none  &none     &kp HOME                 &kp END            &kp PRINTSCREEN      &none  &none
                     &none  &none  &none  &none     &none                    &none
            >;
        };

        QUICK {
            bindings = <
&kpsls LS(TAB) 4  &spaceand Q  &redir         &multiquote      &multiparen        &kp SINGLE_QUOTE   &kp LG(N0)     &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &none  &none
&kpsls DELETE 4   &none        &skl LEFT_ALT  &skl LEFT_GUI    &skl LEFT_CONTROL  &kp DOUBLE_QUOTES  &kpsls PLUS 4  &kp LG(N4)  &mod5C      &kp LG(N6)  &pipe  &none
&redir            &none        &none          &kp LS(INSERT)   &kp LS(LC(V))      &kp GRAVE          &equals        &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &none  &none
                                              &kpslxs MINUS 4  &kpslxs UNDER 4    &trans             &trans         &langor     &none
            >;
        };

        SYS {
            bindings = <
&bootloader  &none         &none         &none           &none         &none         &kpsls C_VOLUME_UP 5    &kp F1   &kp F2   &kp F3  &kp C_PLAY_PAUSE  &kp C_STOP
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &kpsls K_MUTE 5         &kp F4   &kp F5   &kp F6  &none             &none
&sys_reset   &bt BT_CLR    &none         &bt BT_CLR_ALL  &none         &none         &kpsls C_VOLUME_DOWN 5  &kp F7   &kp F8   &kp F9  &none             &sys_reset
                                         &none           &none         &none         &kp F10                 &kp F11  &kp F12
            >;
        };
    };
};
