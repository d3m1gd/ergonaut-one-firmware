#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define MOVER 1
#define NUMER 2
#define QUICK 3
#define SYS 4
#define SYMBOL 5
#define CHAINS 6
#define CHAINS_F 7
#define CHAINS_G 8
#define CHAINS_GI 9
#define CHAINS_S 10
#define CHAINS_SD 11

&lt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&caps_word {
    continue-list = <UNDER BSPC DEL LEFT RIGHT UP DOWN PG_UP PG_DN>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    behaviors {

        htCodeBlockbquotes: HoldTapCodeBlockbquotes {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&CodeBlock &bquotes>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        htTapNoRepeatkp: HoldTapTapNoRepeatkp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&TapNoRepeat &kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        htkpcaps_word: HoldTapkpcaps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp &caps_word>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        mkpmmkpMINUSkpPLUS: ModkpmmkpMINUSkpPLUS {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp &mmkpMINUSkpPLUS>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <200>;
        };

        mmkpDQTkpGRAVE: ModMorphkpDQTkpGRAVE {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmkpEQUALkpEQUAL: ModMorphkpEQUALkpEQUAL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmkpMINUSkpPLUS: ModMorphkpMINUSkpPLUS {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp PLUS>;
            keep-mods = <(MOD_LCTL|MOD_RCTL)>;
            mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL)>;
        };

        mmsllmoMOVERkpUNDER: ModMorphsllmoMOVERkpUNDER {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sllmo MOVER &kp UNDER>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        momommsllmoMOVERkpUNDER: MomentarymommsllmoMOVERkpUNDER {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo &mmsllmoMOVERkpUNDER>;
            flavor = "balanced";
            tapping-term-ms = <300>;
        };

        motomoto: MomentaryTomoto {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo &to>;
            flavor = "balanced";
            tapping-term-ms = <300>;
        };

        off: Off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Layer Off";
            toggle-mode = "off";
        };

        rmtkpkp: RightModTapkpkp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp &kp>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 39 40 41>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            tapping-term-ms = <250>;
        };

        sll250mo: StickyLayer250mo {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            quick-release;
            release-after-ms = <250>;
        };

        sll750mo: StickyLayer750mo {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            quick-release;
            release-after-ms = <750>;
        };

        sllmo: StickyLayerLongmo {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&mo>;
            quick-release;
            release-after-ms = <2000>;
        };

        xkpXdgConfigkp: XKeyPressXdgConfigkp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&XdgConfig &kp>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            tapping-term-ms = <350>;
        };
    };

    macros {

        CodeBlock: CodeBlock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp GRAVE &kp LEFT &kp GRAVE &kp LEFT>;
        };

        GoIfError: GoIfError {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp O &kp SPACE &kp I &kp F &kp E &kp LEFT &kp N &kp LEFT &kp I &kp LEFT &kp F &kp LEFT>;
        };

        KpSlSYMBOL250: KpSlSYMBOL250 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &sll250mo SYMBOL>;
        };

        KpSlSYMBOL750: KpSlSYMBOL750 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &sll750mo SYMBOL>;
        };

        OffGoIfError: OffGoIfError {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_press &GoIfError &macro_pause_for_release &macro_release &GoIfError &macro_tap &macro_param_1to1 &off MACRO_PLACEHOLDER>;
        };

        OffKey: OffKey {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_press &macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_pause_for_release &macro_release &macro_param_2to1 &kp MACRO_PLACEHOLDER &macro_tap &macro_param_1to1 &off MACRO_PLACEHOLDER>;
        };

        TapNoRepeat: TapNoRepeat {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_pause_for_release>;
        };

        XdgConfig: XdgConfig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DOLLAR &kp LS(H) &kp LS(O) &kp LS(M) &kp LS(E) &kp SLASH &kp DOT &kp C &kp O &kp N &kp F &kp I &kp G &kp DQT &kp SLASH>;
        };

        bquotes: OpenClose_bquotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT &sllmo BASE>;
        };

        brackets: OpenClose_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT &sllmo BASE>;
        };

        curlies: OpenClose_curlies {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT &sllmo BASE>;
        };

        dquotes: OpenClose_dquotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DQT &kp LEFT &sllmo BASE>;
        };

        parens: OpenClose_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT &sllmo BASE>;
        };

        squotes: OpenClose_squotes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SQT &kp LEFT &sllmo BASE>;
        };
    };

    combos {
        compatible = "zmk,combos";

        System {
            bindings = <&to SYS>;
            key-positions = <4 5>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        LeftEnter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
        };

        LeftSpace {
            bindings = <&kp SPACE>;
            key-positions = <36 37>;
        };

        BottomLeftCtrlShift {
            bindings = <&kp LC(LSHIFT)>;
            key-positions = <12 24>;
        };

        RightAltWinShift {
            bindings = <&kp LA(LG(LSHIFT))>;
            key-positions = <19 20 21>;
        };

        RightWinShift_Caps {
            bindings = <&htkpcaps_word LG(LSHIFT) 0>;
            key-positions = <20 21>;
        };

        MiddleMouse {
            bindings = <&mkp MCLK>;
            key-positions = <27 28>;
            timeout-ms = <100>;
            require-prior-idle-ms = <200>;
        };

        Parens {
            bindings = <&parens>;
            key-positions = <16 19>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        Curlies {
            bindings = <&curlies>;
            key-positions = <15 20>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        Brackets {
            bindings = <&brackets>;
            key-positions = <14 21>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        DoubleQuotes {
            bindings = <&dquotes>;
            key-positions = <4 7>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        SingleQuotes {
            bindings = <&squotes>;
            key-positions = <3 8>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };

        BackQuotes {
            bindings = <&htCodeBlockbquotes 0 0>;
            key-positions = <2 9>;
            timeout-ms = <60>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB                      &kp Q  &kp W         &kp E                   &kp R                             &htTapNoRepeatkp RG(T) T  &kp Y             &kp U                     &kp I                             &kp O                         &kp P                           &kp LBKT
&mt LSHIFT BACKSPACE         &kp A  &mt LSHIFT S  &mt LGUI D              &mt LALT F                        &kp G                     &kp H             &mt LALT J                &mt LGUI K                        &rmtkpkp LSHIFT L             &htTapNoRepeatkp RG(SEMI) SEMI  &htTapNoRepeatkp RG(SQT) SQT
&mkpmmkpMINUSkpPLUS LCTRL 0  &kp Z  &kp X         &xkpXdgConfigkp 0 C     &kp V                             &kp B                     &kp N             &htTapNoRepeatkp RG(M) M  &htTapNoRepeatkp RG(COMMA) COMMA  &htTapNoRepeatkp RG(DOT) DOT  &kp SLASH                       &kp BACKSLASH
                                                  &motomoto MOVER CHAINS  &momommsllmoMOVERkpUNDER NUMER 0  &mt LCTRL ESCAPE          &mt LCTRL RETURN  &lt NUMER SPACE           &motomoto MOVER CHAINS
            >;
        };

        MOVER {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans  &trans
                        &trans  &trans  &trans  &trans    &trans    &trans
            >;
        };

        NUMER {
            bindings = <
&kp LS(TAB)     &trans  &trans  &trans  &trans          &kp TILDE  &kp N0             &kp N1       &kp N2                         &kp N3                       &trans         &kp RBKT
&kp DELETE      &trans  &trans  &trans  &trans          &trans     &mmkpEQUALkpEQUAL  &mt LALT N4  &mt LGUI N5                    &mt LSHIFT N6                &kp COLON      &mmkpDQTkpGRAVE
&mt LCTRL PLUS  &trans  &trans  &trans  &kp LS(INSERT)  &trans     &kp PLUS           &kp N7       &htTapNoRepeatkp RG(COMMA) N8  &htTapNoRepeatkp RG(DOT) N9  &kp LS(SLASH)  &kp PIPE
                                &trans  &kp UNDER       &trans     &trans             &trans       &trans
            >;
        };

        QUICK {
            bindings = <
&trans  &trans  &trans  &trans  &kp LG(C_VOL_UP)  &kp C_VOL_UP  &trans         &trans          &trans          &trans          &kp PSCRN  &kp LC(RBKT)
&trans  &trans  &trans  &trans  &kp LG(C_VOL_DN)  &kp C_VOL_DN  &kp HOME       &mt LALT PG_DN  &mt LGUI PG_UP  &mt LSHIFT END  &trans     &trans
&trans  &trans  &trans  &trans  &trans            &trans        &trans         &trans          &trans          &trans          &trans     &trans
                        &trans  &trans            &trans        &mt LCTRL F10  &kp F11         &kp F12
            >;
        };

        SYS {
            bindings = <
&bootloader   &to BASE      &to BASE        &to BASE      &sys_reset    &to BASE      &to BASE        &out OUT_USB  &to BASE  &to BASE  &to BASE  &to BASE
&bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2    &bt BT_SEL 1  &bt BT_SEL 0  &to BASE      &to BASE        &to BASE      &to BASE  &to BASE  &to BASE  &to BASE
&to BASE      &to BASE      &bt BT_CLR_ALL  &bt BT_CLR    &out OUT_USB  &out OUT_BLE  &bt BT_CLR_ALL  &to BASE      &to BASE  &to BASE  &to BASE  &to BASE
                                            &to BASE      &to BASE      &to BASE      &to BASE        &to BASE      &to BASE
            >;
        };

        SYMBOL {
            bindings = <
&KpSlSYMBOL250 TILDE  &trans  &trans  &trans  &trans  &trans       &KpSlSYMBOL250 RPAR   &KpSlSYMBOL750 EXCL  &KpSlSYMBOL250 AT     &KpSlSYMBOL250 HASH   &trans                &KpSlSYMBOL250 RBKT
&trans                &trans  &trans  &trans  &trans  &trans       &KpSlSYMBOL750 EQUAL  &KpSlSYMBOL750 DLLR  &KpSlSYMBOL750 PRCNT  &KpSlSYMBOL750 CARET  &KpSlSYMBOL750 COLON  &KpSlSYMBOL250 GRAVE
&trans                &trans  &trans  &trans  &trans  &trans       &KpSlSYMBOL250 PLUS   &KpSlSYMBOL250 AMPS  &KpSlSYMBOL250 STAR   &KpSlSYMBOL250 LPAR   &trans                &KpSlSYMBOL250 PIPE
                                      &trans  &trans  &off SYMBOL  &trans                &trans               &trans
            >;
        };

        CHAINS {
            bindings = <
&to BASE  &to BASE  &to BASE      &to BASE  &to BASE      &to BASE      &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to CHAINS_S  &to BASE  &to CHAINS_F  &to CHAINS_G  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE      &to BASE  &to BASE      &to BASE      &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                                  &to BASE  &to BASE      &to BASE      &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_F {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE              &OffKey CHAINS_F F1   &OffKey CHAINS_F F2   &OffKey CHAINS_F F3  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE              &OffKey CHAINS_F F4   &OffKey CHAINS_F F5   &OffKey CHAINS_F F6  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE              &OffKey CHAINS_F F7   &OffKey CHAINS_F F8   &OffKey CHAINS_F F9  &to BASE  &to BASE
                              &to BASE  &to BASE  &to BASE  &OffKey CHAINS_F F10  &OffKey CHAINS_F F11  &OffKey CHAINS_F F12
            >;
        };

        CHAINS_G {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to CHAINS_GI  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE
                              &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_GI {
            bindings = <
&to BASE  &to BASE  &to BASE  &OffGoIfError CHAINS_GI  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE                 &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE                 &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE                 &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_S {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to CHAINS_SD  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE       &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };

        CHAINS_SD {
            bindings = <
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE             &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &OffKey CHAINS_SD X  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
&to BASE  &to BASE  &to BASE  &to BASE  &to BASE             &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE  &to BASE
                              &to BASE  &to BASE             &to BASE  &to BASE  &to BASE  &to BASE
            >;
        };
    };
};
