#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        lht: lht {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Hold Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        rht: rht {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Hold Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp RIGHT_BRACKET      &kp Q              &kp W              &kp E             &kp R                &kp T             &kp Y                    &kp U                &kp I                    &kp O               &kp P                       &kp LBKT
&kp GRAVE              &lht LEFT_SHIFT A  &lht LEFT_SHIFT S  &lt 2 D           &lt 1 F              &kp G             &kp H                    &lt 1 J              &lt 2 K                  &rht RIGHT_SHIFT L  &rht RIGHT_SHIFT SEMICOLON  &kp APOSTROPHE
&lht LEFT_SHIFT EQUAL  &kp Z              &kp X              &kp C             &kp V                &kp B             &kp N                    &kp M                &kp COMMA                &kp DOT             &kp SLASH                   &rht RSHIFT BACKSLASH
                                                             &mt LEFT_ALT TAB  &mt LEFT_META SPACE  &mt LCTRL ESCAPE  &mt RIGHT_CONTROL ENTER  &mt LEFT_META SPACE  &mt RIGHT_ALT BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&trans       &trans         &kp AT_SIGN           &kp EXCLAMATION                &kp EQUAL            &kp F6                       &kp NUMBER_0  &kp NUMBER_1             &kp NUMBER_2          &kp NUMBER_3              &kp F11    &kp F12
&kp AT_SIGN  &kp AMPERSAND  &mt LEFT_SHIFT ASTRK  &lt 2 PERCENT                  &lt 1 DOLLAR         &kp POUND                    &kp PLUS      &lt 1 NUMBER_4           &lt 2 NUMBER_5        &mt RIGHT_SHIFT NUMBER_6  &kp MINUS  &trans
&trans       &kp N1         &kp N2                &kp QUESTION                   &kp CARET            &kp N5                       &kp NUMBER_0  &kp N7                   &kp N8                &kp N9                    &kp N0     &trans
                                                  &mt LEFT_ALT LEFT_PARENTHESIS  &mt LEFT_META MINUS  &mt LCTRL RIGHT_PARENTHESIS  &trans        &mt RIGHT_META NUMBER_0  &mt RIGHT_ALT DELETE
            >;
        };

        raise_layer {
            bindings = <
&kp A      &kp KP_SLASH     &kp KP_N7  &trans                     &kp KP_N9                 &kp KP_MINUS             &trans    &kp PAGE_DOWN  &kp PAGE_UP  &kp INSERT             &trans           &kp K_MUTE
&kp EQUAL  &kp KP_MULTIPLY  &trans     &trans                     &trans                    &kp KP_PLUS              &kp LEFT  &lt 1 DOWN     &lt 2 UP     &mt RIGHT_SHIFT RIGHT  &trans           &trans
&trans     &kp KP_N0        &kp KP_N1  &kp KP_N2                  &kp KP_N3                 &kp KP_DOT               &trans    &kp HOME       &kp END      &kp PRINTSCREEN        &kp PAUSE_BREAK  &trans
                                       &mt LEFT_ALT LEFT_BRACKET  &mt LEFT_META UNDERSCORE  &mt LCTRL RIGHT_BRACKET  &trans    &trans         &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &trans        &trans        &trans          &trans        &trans           &kp C_VOLUME_UP    &kp F1   &kp F2   &kp F3  &trans      &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4     &kp K_MUTE         &kp F4   &kp F5   &kp F6  &kp C_MUTE  &bt BT_CLR_ALL
&sys_reset   &trans        &trans        &trans          &trans        &trans           &kp C_VOLUME_DOWN  &kp F7   &kp F8   &kp F9  &trans      &sys_reset
                                         &kp LEFT_BRACE  &caps_word    &kp RIGHT_BRACE  &kp F10            &kp F11  &kp F12
            >;
        };
    };
};
