#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW RIGHT_ARROW UP_ARROW DOWN_ARROW PAGE_UP PAGE_DOWN>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 30 31 39 40 41>;
            quick-tap-ms = <200>;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Layer Tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 18 19 30 31 39 40 41>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        kpkp: kpkp {
            compatible = "zmk,behavior-hold-tap";
            label = "kpkp";
            bindings = <&tapNoRepeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        ttnr: ttnr {
            compatible = "zmk,behavior-hold-tap";
            label = "Tap Tap No Repeat";
            bindings = <&tapNoRepeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        sls: sls {
            compatible = "zmk,behavior-sticky-key";
            label = "Short Sticky Layer";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
        };

        sll: sll {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Long";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
        };

        skl: skl {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Key Long";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            ignore-modifiers;
            quick-release;
        };

        kpConfig: kpConfig {
            compatible = "zmk,behavior-hold-tap";
            label = "Key Config macro";
            bindings = <&goConfig>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        slxs: slxs {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Extra Short";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        multiquote: multiquote {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTIQUOTE";
            #binding-cells = <0>;
            bindings = <&quoted>, <&quoteds>, <&quotedb>, <&quotedbbb>;

            tapping-term-ms = <300>;
        };

        pipe: pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "PIPE";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            tapping-term-ms = <300>;
        };

        ll: ll {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Layer";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            bindings = <&mo>, <&sll>;
        };

        langor: langor {
            compatible = "zmk,behavior-tap-dance";
            label = "LANGOR";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>, <&none>;
        };

        mod5C: mod5C {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD5C";
            #binding-cells = <0>;
            bindings = <&kp LG(N5)>, <&kp LG(C)>;
        };

        shiftcaps: shiftcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTCAPS";
            #binding-cells = <0>;
            bindings = <&skl LSHFT>, <&caps_word>;
        };

        slxl: slxl {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Extra Long";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <10000>;
            quick-release;
            ignore-modifiers;
        };

        mtCurly: mtCurly {
            compatible = "zmk,behavior-hold-tap";
            label = "MTCURLY";
            bindings = <&kp>, <&curlyFull>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        mtBracket: mtBracket {
            compatible = "zmk,behavior-hold-tap";
            label = "MTBRACKET";
            bindings = <&kp>, <&bracketFull>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        mtParen: mtParen {
            compatible = "zmk,behavior-hold-tap";
            label = "MTPAREN";
            bindings = <&kp>, <&parenFull>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        mmEquals: mmEquals {
            compatible = "zmk,behavior-mod-morph";
            label = "MMEQUALS";
            bindings = <&kp EQUAL>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mmQuoteGrave: mmQuoteGrave {
            compatible = "zmk,behavior-mod-morph";
            label = "MMQUOTEGRAVE";
            bindings = <&kp DOUBLE_QUOTES>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lslxl: lslxl {
            compatible = "zmk,behavior-hold-tap";
            label = "LSLXL";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            bindings = <&mo>, <&slxl>;
        };
    };

    macros {
        sksls: slmod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &skl MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "SLMOD";
        };

        tapNoRepeat: tnr {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>;

            label = "Tap No Repeat";
        };

        tsls: tsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer Short";
        };

        tsl: tsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer";
        };

        kpsll: kpsll {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sll MACRO_PLACEHOLDER>;
            label = "KPSLL";
        };

        goConfig: homeconfig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DLLR &kp LS(H) &kp LS(O) &kp LS(M) &kp LS(E) &kp DQT &kp FSLH &kp DOT &kp C &kp O &kp N &kp F &kp I &kp G &kp FSLH>;
            label = "HOMECONFIG";
        };

        kprsl: kprsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sl MACRO_PLACEHOLDER>;

            label = "KeyPress Repeat StickyLayer";
        };

        kprsls: kprsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sls MACRO_PLACEHOLDER>;

            label = "KPRSLS";
        };

        tslxs: tslxs {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &slxs MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer Extra Short";
        };

        null1: devnull1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL1";
        };

        nullX: devnullX {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL2";
        };

        nullAll: devnull3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE &kp N2 &kp GT &kp AMPS &kp N1 &kp SPACE>;
            label = "DEVNULL3";
        };

        quoted: quoted {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "QUOTED";
        };

        varred: varred {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "VARRED";
        };

        parened: parened {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENED";
        };

        braced: braced {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "BRACED";
        };

        bracketed: bracketed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETED";
        };

        goeq: goequals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUALS";
        };

        quoteds: quoteds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT_ARROW>;
            label = "QUOTEDS";
        };

        quotedb: quotedb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT_ARROW>;
            label = "QUOTEDB";
        };

        quotedbbb: quotedbbb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "QUOTEDBBB";
        };

        rsls: rsls {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&key_repeat &macro_param_1to1 &sls MACRO_PLACEHOLDER>;
            label = "Repeat and Sticky Layer Short";
        };

        goIfError: goIfError {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp F &kp SPACE &kp E &kp R &kp R &kp SPACE &kp EXCL &kp EQUAL &kp SPACE &kp N &kp I &kp L &kp SPACE &kp LEFT_BRACE &kp SPACE &kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE &kp E &kp R &kp R &kp SEMI &kp SPACE &kp RBRC &kp LEFT_ARROW &kp LEFT &kp LEFT &kp LEFT &kp LEFT &kp LEFT>;
            label = "GOIFERROR";
        };

        curlyFull: curlyFull {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RBRC &kp LEFT>;
            label = "CURLYFULL";
        };

        bracketFull: bracketFull {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETFULL";
        };

        parenFull: parenFull {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "PARENFULL";
        };

        mdCode: mdCode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp LEFT &kp LEFT &kp LS(RETURN) &kp LS(RETURN) &kp UP>;
            label = "MDCODE";
        };

        envQuoted: envQuoted {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DLLR &kp DQT &kp LEFT>;
            label = "ENVQUOTED";
        };

        envCurlyQuoted: envCurly {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DLLR &kp LEFT_BRACE &kp RBRC &kp DQT &kp LEFT &kp LEFT>;
            label = "ENVCURLY";
        };
    };

    combos {
        compatible = "zmk,combos";

        LAM {
            bindings = <&skl LA(LEFT_GUI)>;
            key-positions = <15 16>;
            layers = <0>;
        };

        LCM {
            bindings = <&skl LC(LEFT_GUI)>;
            key-positions = <15 38>;
            layers = <0>;
        };

        LSM {
            bindings = <&skl LS(LEFT_GUI)>;
            key-positions = <15 14>;
            layers = <0>;
        };

        LCS {
            bindings = <&skl LS(LEFT_CONTROL)>;
            key-positions = <14 38>;
            layers = <0>;
        };

        LAS {
            bindings = <&skl LS(LEFT_ALT)>;
            key-positions = <14 16>;
            layers = <0>;
        };

        LAC {
            bindings = <&skl LA(LEFT_CONTROL)>;
            key-positions = <16 38>;
            layers = <0>;
        };

        LACM {
            bindings = <&skl LA(LG(LEFT_CONTROL))>;
            key-positions = <16 15 38>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        LASM {
            bindings = <&skl LA(LS(LEFT_GUI))>;
            key-positions = <14 15 16>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        LACS {
            bindings = <&skl LA(LS(LEFT_CONTROL))>;
            key-positions = <14 16 38>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        sys {
            bindings = <&sll 5>;
            key-positions = <4 5>;
            layers = <0>;
            require-prior-idle-ms = <500>;
        };

        lenter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
            layers = <0>;
        };

        lspace {
            bindings = <&kp SPACE>;
            key-positions = <37 36>;
            layers = <0>;
        };

        tctrl {
            bindings = <&kt LGUI>;
            key-positions = <36 37 38>;
        };

        RCAPS {
            bindings = <&caps_word>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB               &kp Q  &kp W         &kp E           &kp R       &kpkp RG(T) T     &kp Y             &kp U          &kp I                  &kp O              &kp P                &kp LBKT
&mt LSHIFT BACKSPACE  &kp A  &mt LSHIFT S  &mt LEFT_GUI D  &mt LALT F  &kp G             &kp H             &rmt LALT J    &rmt LEFT_WIN K        &rmt RSHIFT L      &kpkp RG(SEMI) SEMI  &kpkp RG(SINGLE_QUOTE) SINGLE_QUOTE
&mt LCTRL MINUS       &kp Z  &kp X         &kpConfig 0 C   &kp V       &kp B             &kp N             &kpkp RG(M) M  &kpkp RG(COMMA) COMMA  &kpkp RG(DOT) DOT  &kp SLASH            &kp BACKSLASH
                                           &lslxl 2 6      &ll 1 4     &mt LCTRL ESCAPE  &mt LCTRL RETURN  &lt 1 SPACE    &slxl 6
            >;
        };

        NUM {
            bindings = <
&kp LS(TAB)  &trans  &trans               &trans           &trans           &trans  &kp N0  &kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3   &mmEquals      &kp RIGHT_BRACKET
&kp DELETE   &trans  &mtBracket LSHIFT 0  &mtParen LGUI 0  &mtCurly LALT 0  &trans  &trans  &mt LALT NUMBER_4  &mt LGUI N5   &mt RSHIFT N6  &kp COLON      &mmQuoteGrave
&trans       &trans  &trans               &kp PLUS         &kp LS(INSERT)   &trans  &trans  &kp N7             &kp N8        &kp N9         &kp LS(SLASH)  &kp PIPE
                                          &trans           &kp UNDERSCORE   &trans  &trans  &kp DOT            &trans
            >;
        };

        QUICK {
            bindings = <
&trans  &trans  &trans  &trans  &tsls LG(C_VOLUME_UP) 2    &tsls C_VOLUME_UP 2    &trans          &trans          &trans        &trans             &kp PRINTSCREEN  &kp LC(RIGHT_BRACKET)
&trans  &trans  &trans  &trans  &tsls LG(C_VOLUME_DOWN) 2  &tsls C_VOLUME_DOWN 2  &kp LEFT        &rmt LALT DOWN  &rmt LGUI UP  &rmt RSHIFT RIGHT  &trans           &trans
&trans  &trans  &trans  &trans  &trans                     &trans                 &trans          &trans          &trans        &trans             &trans           &trans
                        &trans  &trans                     &trans                 &rmt LCTRL F10  &kp F11         &kp F12
            >;
        };

        REPEAT {
            bindings = <
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &key_repeat  &trans  &trans  &trans  &trans
            >;
        };

        MOVE {
            bindings = <
&trans  &trans  &trans  &kpsll END 4  &trans  &trans  &trans         &trans              &trans            &trans        &trans  &trans
&trans  &trans  &trans  &trans        &trans  &trans  &kpsll HOME 4  &kpsll PAGE_DOWN 4  &kpsll PAGE_UP 4  &kpsll END 4  &trans  &trans
&trans  &trans  &trans  &trans        &trans  &trans  &trans         &trans              &trans            &trans        &trans  &trans
                        &trans        &trans  &trans  &trans         &trans              &trans
            >;
        };

        SYS {
            bindings = <
&bootloader  &none         &none         &none           &out OUT_USB  &out OUT_BLE  &tsls C_VOLUME_UP 5    &kp F1   &kp F2   &kp F3  &kp C_PLAY_PAUSE  &kp C_STOP
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &tsls K_MUTE 5         &kp F4   &kp F5   &kp F6  &none             &none
&sys_reset   &bt BT_CLR    &none         &bt BT_CLR_ALL  &none         &none         &tsls C_VOLUME_DOWN 5  &kp F7   &kp F8   &kp F9  &none             &sys_reset
                                         &none           &none         &none         &kp F10                &kp F11  &kp F12
            >;
        };

        chains {
            bindings = <
&none  &none  &none  &slxl 12  &slxl 8  &none  &none  &none     &none  &none  &none  &none
&none  &none  &none  &none     &none    &none  &none  &none     &none  &none  &none  &none
&none  &none  &none  &none     &none    &none  &none  &slxl 11  &none  &none  &none  &none
                     &none     &none    &none  &none  &none     &none
            >;
        };

        chain_R {
            bindings = <
&none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &slxl 8  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none
                     &none    &none  &none  &none  &none  &none
            >;
        };

        chain_RD {
            bindings = <
&none  &none  &none  &none  &none  &none  &none   &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none   &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &null1  &none  &none  &none  &none  &none
                     &none  &none  &none  &none   &none  &none
            >;
        };

        chain_G {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &slxl 10  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none     &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none     &none  &none  &none
                     &none  &none  &none  &none  &none  &none
            >;
        };

        chain_GI {
            bindings = <
&none  &none  &none  &goIfError  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none       &none  &none  &none  &none  &none  &none  &none  &none
                     &none       &none  &none  &none  &none  &none
            >;
        };

        chain_M {
            bindings = <
&none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &mdCode  &none  &none  &none  &none  &none  &none  &none  &none
                     &none    &none  &none  &none  &none  &none
            >;
        };

        chain_E {
            bindings = <
&trans  &envQuoted  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans  &slxl 13  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                            &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        chain_EC {
            bindings = <
&none  &envCurlyQuoted  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none            &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none            &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                               &none  &none  &none  &none  &none  &none
            >;
        };
    };
};
