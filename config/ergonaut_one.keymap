#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "balanced";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE LEFT_ARROW RIGHT_ARROW UP_ARROW DOWN_ARROW PAGE_UP PAGE_DOWN>; };

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 30 31 39 40 41>;
            quick-tap-ms = <200>;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Layer Tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 18 19 30 31 39 40 41>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        kpkp: kpkp {
            compatible = "zmk,behavior-hold-tap";
            label = "kpkp";
            bindings = <&tapNoRepeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        ttnr: ttnr {
            compatible = "zmk,behavior-hold-tap";
            label = "Tap Tap No Repeat";
            bindings = <&tapNoRepeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        sls: sls {
            compatible = "zmk,behavior-sticky-key";
            label = "Short Sticky Layer";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
        };

        sll: sll {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Long";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            quick-release;
        };

        skl: skl {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Key Long";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1500>;
            ignore-modifiers;
            quick-release;
        };

        kpConfig: kpConfig {
            compatible = "zmk,behavior-hold-tap";
            label = "Key Config macro";
            bindings = <&goConfig>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        slxs: slxs {
            compatible = "zmk,behavior-sticky-key";
            label = "Sticky Layer Extra Short";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <200>;
            quick-release;
        };

        multiquote: multiquote {
            compatible = "zmk,behavior-tap-dance";
            label = "MULTIQUOTE";
            #binding-cells = <0>;
            bindings = <&quoted>, <&quoteds>, <&quotedb>, <&quotedbbb>;

            tapping-term-ms = <300>;
        };

        pipe: pipe {
            compatible = "zmk,behavior-tap-dance";
            label = "PIPE";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp BACKSLASH>;

            tapping-term-ms = <300>;
        };

        ll: ll {
            compatible = "zmk,behavior-hold-tap";
            label = "Layer Layer";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
            bindings = <&mo>, <&sl>;
        };

        langor: langor {
            compatible = "zmk,behavior-tap-dance";
            label = "LANGOR";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE)>, <&none>;
        };

        mod5C: mod5C {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD5C";
            #binding-cells = <0>;
            bindings = <&kp LG(N5)>, <&kp LG(C)>;
        };

        shiftcaps: shiftcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTCAPS";
            #binding-cells = <0>;
            bindings = <&skl LSHFT>, <&caps_word>;
        };
    };

    macros {
        sksls: slmod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &skl MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "SLMOD";
        };

        tapNoRepeat: tnr {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>;

            label = "Tap No Repeat";
        };

        tsls: tsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sls MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer Short";
        };

        tsl: tsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sl MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer";
        };

        kpsll: kpsll {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &sll MACRO_PLACEHOLDER>;
            label = "KPSLL";
        };

        goConfig: homeconfig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp DLLR &kp LS(H) &kp LS(O) &kp LS(M) &kp LS(E) &kp DQT &kp FSLH &kp DOT &kp C &kp O &kp N &kp F &kp I &kp G &kp FSLH>;
            label = "HOMECONFIG";
        };

        kprsl: kprsl {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sl MACRO_PLACEHOLDER>;

            label = "KeyPress Repeat StickyLayer";
        };

        kprsls: kprsls {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &sls MACRO_PLACEHOLDER>;

            label = "KPRSLS";
        };

        tslxs: tslxs {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &slxs MACRO_PLACEHOLDER>;
            label = "Tap and Sticky Layer Extra Short";
        };

        unicode: unicode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(U))>;
            label = "UNICODE";
        };

        null1: devnull1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL1";
        };

        null2: devnull2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE>;
            label = "DEVNULL2";
        };

        nullall: devnull3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp FSLH &kp D &kp E &kp V &kp FSLH &kp N &kp U &kp L &kp L &kp SPACE &kp N2 &kp GT &kp AMPS &kp N1 &kp SPACE>;
            label = "DEVNULL3";
        };

        quoted: quoted {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "QUOTED";
        };

        varred: varred {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &kp LEFT_BRACE &kp RBRC &kp LEFT_ARROW>;
            label = "VARRED";
        };

        parened: parened {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENED";
        };

        braced: braced {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "BRACED";
        };

        bracketed: bracketed {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETED";
        };

        goeq: goequals {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "GOEQUALS";
        };

        quoteds: quoteds {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE &kp SINGLE_QUOTE &kp LEFT_ARROW>;
            label = "QUOTEDS";
        };

        quotedb: quotedb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT_ARROW>;
            label = "QUOTEDB";
        };

        quotedbbb: quotedbbb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT_ARROW &kp LEFT_ARROW &kp LEFT_ARROW>;
            label = "QUOTEDBBB";
        };

        redir21: redirect21 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N2 &kp GT &kp AMPS &kp N1 &kp SPACE>;
            label = "REDIRECT21";
        };

        eqeq: eqeq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "EQEQ";
        };

        neq: neq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL>;
            label = "NEQ";
        };

        rsls: rsls {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&key_repeat &macro_param_1to1 &sls MACRO_PLACEHOLDER>;
            label = "Repeat and Sticky Layer Short";
        };
    };

    combos {
        compatible = "zmk,combos";

        LAM {
            bindings = <&skl LA(LEFT_GUI)>;
            key-positions = <15 16>;
            layers = <0>;
        };

        LCM {
            bindings = <&skl LC(LEFT_GUI)>;
            key-positions = <15 38>;
            layers = <0>;
        };

        LSM {
            bindings = <&skl LS(LEFT_GUI)>;
            key-positions = <15 14>;
            layers = <0>;
        };

        LCS {
            bindings = <&skl LS(LEFT_CONTROL)>;
            key-positions = <14 38>;
            layers = <0>;
        };

        LAS {
            bindings = <&skl LS(LEFT_ALT)>;
            key-positions = <14 16>;
            layers = <0>;
        };

        LAC {
            bindings = <&skl LA(LEFT_CONTROL)>;
            key-positions = <16 38>;
            layers = <0>;
        };

        LACM {
            bindings = <&skl LA(LG(LEFT_CONTROL))>;
            key-positions = <16 15 38>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        LASM {
            bindings = <&skl LA(LS(LEFT_GUI))>;
            key-positions = <14 15 16>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        LACS {
            bindings = <&skl LA(LS(LEFT_CONTROL))>;
            key-positions = <14 16 38>;
            layers = <0>;
            timeout-ms = <100>;
            require-prior-idle-ms = <500>;
        };

        sys {
            bindings = <&sll 4>;
            key-positions = <4 5>;
            layers = <0>;
            require-prior-idle-ms = <500>;
        };

        lenter {
            bindings = <&kp RETURN>;
            key-positions = <37 38>;
            layers = <0>;
        };

        lspace {
            bindings = <&kp SPACE>;
            key-positions = <37 36>;
            layers = <0>;
        };

        tctrl {
            bindings = <&kt LGUI>;
            key-positions = <36 37 38>;
        };

        RCAPS {
            bindings = <&caps_word>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp TAB               &kp Q  &kp W         &kpkp F13 E     &kp R       &kp T             &kp Y                     &kp U        &kp I            &kp O              &kp P           &kp LBKT
&mt LSHIFT BACKSPACE  &kp A  &mt LSHIFT S  &mt LEFT_GUI D  &mt LALT F  &kp G             &kp H                     &rmt LALT J  &rmt LEFT_WIN K  &rmt RSHIFT L      &kpkp F16 SEMI  &kpkp KP_N5 SINGLE_QUOTE
&mt LCTRL MINUS       &kp Z  &kp X         &kpConfig 0 C   &kp V       &kp B             &kp N                     &kpkp F14 M  &kpkp F15 COMMA  &kpkp LS(F15) DOT  &kp SLASH       &kp BACKSLASH
                                           &ll 3 3         &ll 1 2     &mt LCTRL ESCAPE  &mt RIGHT_CONTROL RETURN  &lt 1 SPACE  &none
            >;
        };

        NUM {
            bindings = <
&tsls LS(TAB) 8  &trans  &kp HOME         &kp UP         &kp END         &kp PG_UP  &kp N0           &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL      &kp RIGHT_BRACKET
&tsls DELETE 9   &trans  &mt LSHIFT LEFT  &mt LGUI DOWN  &mt LALT RIGHT  &kp PG_DN  &kp LEFT_BRACE   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp COLON      &kp DOUBLE_QUOTES
&trans           &trans  &kp MINUS        &kp PLUS       &kp LS(INSERT)  &trans     &kp RIGHT_BRACE  &kp N7        &kp N8        &kp N9        &kp LS(SLASH)  &kp PIPE
                                          &kp MINUS      &kp UNDERSCORE  &trans     &trans           &kp DOT       &trans
            >;
        };

        PROG {
            bindings = <
&tsls LS(TAB) 8  &trans     &trans  &trans         &trans              &trans  &tslxs RIGHT_PARENTHESIS 2  &tslxs EXCLAMATION 2  &tslxs AT_SIGN 2  &tslxs HASH 2              &tsls EQUAL 10  &kp RIGHT_BRACKET
&tsls DELETE 9   &kp TILDE  &trans  &trans         &tsls GRAVE 10      &trans  &kp LEFT_BRACE              &tslxs DOLLAR 2       &tslxs PERCENT 2  &tslxs CARET 2             &tslxs COLON 2  &tsls DOUBLE_QUOTES 10
&trans           &trans     &trans  &trans         &trans              &trans  &kp RIGHT_BRACE             &tslxs AMPERSAND 2    &tslxs STAR 2     &tslxs LEFT_PARENTHESIS 2  &kp LS(SLASH)   &tsls PIPE 10
                                    &tsls MINUS 5  &tsls UNDERSCORE 6  &trans  &trans                      &trans                &trans
            >;
        };

        QUICK {
            bindings = <
&tsls LS(TAB) 8  &trans  &trans  &trans     &tsls LG(C_VOLUME_UP) 3    &tsls C_VOLUME_UP 3    &nullall  &null1   &null2   &redir21  &kp PRINTSCREEN  &kp LC(RIGHT_BRACKET)
&tsls DELETE 9   &trans  &trans  &trans     &tsls LG(C_VOLUME_DOWN) 3  &tsls C_VOLUME_DOWN 3  &trans    &trans   &trans   &trans    &trans           &trans
&trans           &trans  &trans  &kp LG(C)  &trans                     &tslxs C_PLAY_PAUSE 3  &trans    &trans   &trans   &trans    &trans           &trans
                                 &trans     &trans                     &trans                 &kp F10   &kp F11  &kp F12
            >;
        };

        SYS {
            bindings = <
&bootloader  &none         &none         &none           &out OUT_USB  &out OUT_BLE  &tsls C_VOLUME_UP 4    &kp F1   &kp F2   &kp F3  &kp C_PLAY_PAUSE  &kp C_STOP
&none        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4  &tsls K_MUTE 4         &kp F4   &kp F5   &kp F6  &none             &none
&sys_reset   &bt BT_CLR    &none         &bt BT_CLR_ALL  &none         &none         &tsls C_VOLUME_DOWN 4  &kp F7   &kp F8   &kp F9  &none             &sys_reset
                                         &none           &none         &none         &kp F10                &kp F11  &kp F12
            >;
        };

        minus {
            bindings = <
&trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &rsls 5  &trans  &trans  &trans  &trans  &trans
            >;
        };

        under {
            bindings = <
&trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &rsls 6  &trans  &trans  &trans  &trans
            >;
        };

        plus {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &rsls 7  &trans  &trans  &trans
            >;
        };

        tab {
            bindings = <
&rsls 8  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        delete {
            bindings = <
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&rsls 9  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        equals {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &rsls 10  &trans
&trans  &trans  &trans  &trans  &rsls 10  &trans  &trans  &trans  &trans  &trans  &trans    &rsls 10
&trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans    &rsls 10
                        &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
