#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 30 31 39 40 41>;
            quick-tap-ms = <200>;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Mod Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Layer Tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 41 18 19 30 31 39 40 41>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        rlt: rlt {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Layer Tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 36 37 38>;
        };

        lst: lst {
            compatible = "zmk,behavior-hold-tap";
            label = "Left Shift Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <30 31 32 33 35 34 23 6 7 9 10 11 19 20 21 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 30 31 36 37 38>;
            quick-tap-ms = <200>;
            hold-trigger-on-release;
        };

        rst: rst {
            compatible = "zmk,behavior-hold-tap";
            label = "Right Shift Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 40 41 39>;
            hold-trigger-on-release;
        };

        slsl: slsl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Tap 2Sticky  Layers";
            bindings = <&sl>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };

        kpkp: kpkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HoldTap 2KeyPress";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        kpkpnr: kpkpnr {
            compatible = "zmk,behavior-hold-tap";
            label = "2key press no repeat";
            bindings = <&norep>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        kpcaps: kpcaps {
            compatible = "zmk,behavior-hold-tap";
            label = "keypress caps behavior";
            bindings = <&caps_word>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    macros {
        lazygit: bg_lazygit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Z) &kp L &kp A &kp Z &kp Y &kp G &kp I &kp T &kp SEMI &kp SPACE &kp F &kp G &kp RET>;
            label = "BG_LAZYGIT";
        };

        slmod: slmod {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &macro_param_2to1 &sk MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_2to1 &sk MACRO_PLACEHOLDER &macro_param_1to1 &mo MACRO_PLACEHOLDER>;

            label = "SLMOD";
        };

        spaceand: spaceand {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kp SPACE &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "SPACEAND";
        };

        noslcaps: nosl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K_CANCEL &caps_word>;
            label = "NOSL";
        };

        norep: norep {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>;

            label = "NOREP";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp RIGHT_BRACKET        &kpkpnr LC(Q) Q  &kp W  &kp E                 &kp R            &kp T             &kp Y                    &kpkpnr EXCLAMATION U  &kpkpnr AT_SIGN I       &kpkpnr HASH O   &kp P                    &kp LBKT
&lst LEFT_SHIFT GRAVE    &lst LSHFT A     &kp S  &kpkpnr UNDERSCORE D  &kpkpnr MINUS F  &kp G             &kp H                    &kpkpnr DOLLAR J       &kpkpnr PERCENT K       &kpkpnr CARET L  &kpkpnr COLON SEMICOLON  &kpcaps 0 APOSTROPHE
&lst LEFT_CONTROL EQUAL  &kp Z            &kp X  &kp C                 &kp V            &kp B             &kp N                    &kpkpnr AMPERSAND M    &kpkpnr ASTERISK COMMA  &kp DOT          &kp SLASH                &rst RIGHT_CONTROL BACKSLASH
                                                 &llt 2 TAB            &llt 1 SPACE     &mt LCTRL ESCAPE  &mt RIGHT_CONTROL ENTER  &slsl 5 4              &kpkp MINUS BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&trans  &trans  &trans  &kp LEFT_BRACKET                 &kp RIGHT_BRACKET                    &trans  &trans     &kp NUMBER_1                 &kp NUMBER_2             &kp NUMBER_3            &trans             &trans
&trans  &trans  &trans  &lmt LEFT_META LEFT_PARENTHESIS  &lmt LEFT_CONTROL RIGHT_PARENTHESIS  &trans  &kp PLUS   &rmt RIGHT_CONTROL NUMBER_4  &rmt LEFT_META NUMBER_5  &rmt LEFT_ALT NUMBER_6  &rmt RSHIFT MINUS  &trans
&trans  &trans  &trans  &kp LEFT_BRACE                   &kp RIGHT_BRACE                      &trans  &kp EQUAL  &kp N7                       &kp N8                   &kp N9                  &trans             &trans
                        &trans                           &trans                               &trans  &trans     &kp N0                       &kp DELETE
            >;
        };

        raise_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN            &kp PAGE_UP        &kp INSERT           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &rmt RIGHT_CONTROL DOWN  &rmt LEFT_META UP  &rmt LEFT_ALT RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp HOME                 &kp END            &kp PRINTSCREEN      &trans  &trans
                        &trans  &trans  &trans  &trans    &kp N0                   &kp DELETE
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &kp C_VOLUME_UP    &kp F1   &kp F2   &kp F3  &trans  &bootloader
&bt BT_CLR   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp K_MUTE         &kp F4   &kp F5   &kp F6  &trans  &trans
&sys_reset   &trans          &trans        &trans        &trans        &trans        &kp C_VOLUME_DOWN  &kp F7   &kp F8   &kp F9  &trans  &sys_reset
                                           &trans        &caps_word    &trans        &kp F10            &kp F11  &kp F12
            >;
        };

        layer_4 {
            bindings = <
&trans     &spaceand Q          &trans             &trans             &trans                 &trans     &spaceand Y    &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &trans     &trans
&noslcaps  &slmod 4 LEFT_SHIFT  &slmod 4 LEFT_ALT  &slmod 4 LEFT_GUI  &slmod 4 LEFT_CONTROL  &lazygit   &trans         &kp LG(N4)  &kp LG(N5)  &kp LG(N6)  &kp MINUS  &trans
&trans     &trans               &trans             &kp LS(INSERT)     &kp LS(LC(V))          &trans     &trans         &kp LG(N7)  &kp LG(N8)  &kp LG(N9)  &trans     &trans
                                                   &trans             &kp UNDER              &kp MINUS  &kp LG(SPACE)  &kp LG(N0)  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans          &trans     &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans  &kp UNDERSCORE  &kp MINUS  &trans  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans  &trans          &trans     &trans  &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
                        &trans          &trans     &tog 5  &trans  &kp N0  &trans
            >;
        };
    };
};
